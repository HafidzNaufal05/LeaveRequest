#pragma checksum "D:\LeaveRequestProject\LeaveRequest\LeaveRequest\LeaveRequestClient\Views\Admin\Index2.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2ce12c0e83fc0ca0c25418b71a3607d6917244d5"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Admin_Index2), @"mvc.1.0.view", @"/Views/Admin/Index2.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\LeaveRequestProject\LeaveRequest\LeaveRequest\LeaveRequestClient\Views\_ViewImports.cshtml"
using LeaveRequestClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\LeaveRequestProject\LeaveRequest\LeaveRequest\LeaveRequestClient\Views\_ViewImports.cshtml"
using LeaveRequestClient.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2ce12c0e83fc0ca0c25418b71a3607d6917244d5", @"/Views/Admin/Index2.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"18486de7349ee3163d6e680a7ab6956201a35989", @"/Views/_ViewImports.cshtml")]
    public class Views_Admin_Index2 : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/AssetAdminLTE/dist/img/logo MII.jpg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString("AdminLTE Logo"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("brand-image img-circle elevation-3"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("opacity: .8"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("nav-link"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-area", "", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "Admin", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "Index2", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("buttonUpdate"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("action", new global::Microsoft.AspNetCore.Html.HtmlString("Admin/Edit"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 4 "D:\LeaveRequestProject\LeaveRequest\LeaveRequest\LeaveRequestClient\Views\Admin\Index2.cshtml"
  
    Layout = "DashboardLayout";

#line default
#line hidden
#nullable disable
            WriteLiteral("    <aside class=\"main-sidebar sidebar-dark-primary elevation-4\">\r\n        <!-- Brand Logo -->\r\n        <a href=\"index3.html\" class=\"brand-link\">\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "2ce12c0e83fc0ca0c25418b71a3607d6917244d57344", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            <span class=\"brand-text font-weight-light\">Leave Request</span>\r\n        </a>\r\n\r\n        <!-- Sidebar -->\r\n        <div class=\"sidebar\">\r\n            <!-- Sidebar user panel (optional) -->\r\n");
            WriteLiteral(@"
            <!-- SidebarSearch Form -->
            <div class=""form-inline"">
                <div class=""input-group"" data-widget=""sidebar-search"">
                    <input class=""form-control form-control-sidebar"" type=""search"" placeholder=""Search"" aria-label=""Search"">
                    <div class=""input-group-append"">
                        <button class=""btn btn-sidebar"">
                            <i class=""fas fa-search fa-fw""></i>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Sidebar Menu -->
            <nav class=""mt-2"">
                <ul class=""nav nav-pills nav-sidebar flex-column"" data-widget=""treeview"" role=""menu"" data-accordion=""false"">
                    <!-- Add icons to the links using the .nav-icon class
                    with font-awesome or any other icon font library -->
                    <li class=""nav-item"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2ce12c0e83fc0ca0c25418b71a3607d6917244d59881", async() => {
                WriteLiteral("\r\n                            <i class=\"nav-icon fas fa-user\"></i><span class=\"brand-text font-weight-light\">Data Employee</span>\r\n                        ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Area = (string)__tagHelperAttribute_5.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_6.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_7.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </li>
                </ul>
            </nav>
            <!-- /.sidebar-menu -->
        </div>
        <!-- /.sidebar -->
    </aside>
    <div class=""content-wrapper"">
        <div class=""container-fluid"">
            <h4 class=""text-muted note-fontsize-10 m-b-5 text-center"">Welcome</h4>
            <div class=""container mt-5"">
                <table id=""myTable"" class=""table table-striped table-bordered dataTable container"">
                    <thead class=""thead-light"">
                        <tr role=""row"">
                            <th>No</th>
                            <th>NIK</th>
                            <th>Name</th>
                            <th>Birth Date</th>
                            <th>Gender</th>
                            <th>Address</th>
                            <th>Maritial Status</th>
                            <th>Phone Numbers</th>
                            <th>Email</th>
                            <th>Join Date</th>
  ");
            WriteLiteral(@"                          <th>R-Quota</th>
                            <th>NIK Manager</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>

    <div class=""modal fade"" id=""modalAdd"" role=""dialog"" aria-hidden=""true"">
        <div class=""modal-dialog"">
            <div class=""modal-dialog modal-dialog-centered"">
                <div class=""modal-content"">
                    <div class=""modal-header"">
                        <h5 class=""modal-title"" id=""exampleModalLiveLabel"">Update Employee</h5>
                        <button id=""buttonClose"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                            <span aria-hidden=""true"">×</span>
                        </button>
                    </div>
                    <div class=""modal-body"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2ce12c0e83fc0ca0c25418b71a3607d6917244d513725", async() => {
                WriteLiteral("\r\n");
                WriteLiteral(@"                            <div class=""row"">
                                <div class=""col-6"">

                                    <div class=""mb-3"">
                                        <label for=""formGroupExampleInput"" class=""form-label"">NIK</label>
                                        <input type=""text"" class=""form-control"" id=""nik"" name=""nik"" placeholder=""NIK"">
                                    </div>

                                    <div class=""mb-3"">
                                        <label for=""formGroupExampleInput"" class=""form-label"">First Name</label>
                                        <input type=""text"" class=""form-control"" id=""firstName"" name=""firstName"" placeholder=""First Name"">
                                    </div>

                                    <div class=""mb-3"">
                                        <label for=""formGroupExampleInput"" class=""form-label"">Birth Date</label>
                                        <input type=""date"" class=""fo");
                WriteLiteral(@"rm-control"" id=""birthDate"" name=""birthDate"" placeholder=""Birth Date"">
                                    </div>

                                    <div class=""mb-3"">
                                        <label for=""formGroupExampleInput"" class=""form-label"">Gender</label>
                                        <div style=""display:flex"">
                                            <div class=""form-check"">
                                                <input class=""form-check-input"" type=""radio"" name=""gender"" id=""male"" value=""Male"">
                                                <label class=""form-check-label"" for=""male"">Male</label>
                                            </div>
                                            <div class=""form-check"">
                                                <input class=""form-check-input"" type=""radio"" name=""gender"" id=""female"" value=""Female"">
                                                <label class=""form-check-label"" for=""female"">Female</label>");
                WriteLiteral(@"
                                            </div>
                                        </div>
                                    </div>

                                    <div class=""mb-3"">
                                        <label for=""formGroupExampleInput"" class=""form-label"">Address</label>
                                        <input type=""text"" class=""form-control"" id=""address"" name=""address"" placeholder=""Address"">
                                    </div>

                                    <div class=""mb-3"">
                                        <label for=""formGroupExampleInput"" class=""form-label"">Maritial Status</label>
                                        <div style=""display:flex"">
                                            <div class=""form-check"">
                                                <input class=""form-check-input"" type=""radio"" name=""maritialStatus"" id=""single"" value=""Single"">
                                                <label class=""form-check-la");
                WriteLiteral(@"bel"" for=""single"">Single</label>
                                            </div>
                                            <div class=""form-check"">
                                                <input class=""form-check-input"" type=""radio"" name=""maritialStatus"" id=""married"" value=""Married"">
                                                <label class=""form-check-label"" for=""married"">Married</label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class=""mb-3"">
                                        <label for=""formGroupExampleInput"" class=""form-label"">NIK Manager</label>
                                        <input type=""text"" class=""form-control"" id=""niK_Manager"" name=""niK_Manager"" placeholder=""NIK Manager"">
                                    </div>


                                </div>
                                <div class=""col-6"">
           ");
                WriteLiteral(@"                         <div class=""mb-3"">
                                        <label for=""formGroupExampleInput"" class=""form-label"">Last Name</label>
                                        <input type=""text"" class=""form-control"" id=""lastName"" name=""lastName"" placeholder=""Last Name"">
                                    </div>

                                    <div class=""mb-3"">
                                        <label for=""formGroupExampleInput"" class=""form-label"">Phone Number</label>
                                        <input type=""text"" class=""form-control"" id=""phoneNumber"" name=""phoneNumber"" placeholder=""Phone Numbe"">
                                    </div>

                                    <div class=""mb-3"">
                                        <label for=""formGroupExampleInput"" class=""form-label"">Email</label>
                                        <input type=""email"" class=""form-control"" id=""email"" name=""email"" placeholder=""Email"">
                              ");
                WriteLiteral(@"      </div>

                                    <div class=""mb-3"">
                                        <label for=""formGroupExampleInput"" class=""form-label"">Join Date</label>
                                        <input type=""date"" class=""form-control"" id=""joinDate"" name=""joinDate"" placeholder=""Join Datee"">
                                    </div>

                                    <div class=""mb-3"">
                                        <label for=""formGroupExampleInput"" class=""form-label"">Remaining Quota</label>
                                        <input type=""text"" class=""form-control"" id=""remainingQuota"" name=""remainingQuota"" placeholder=""Remaining Quota"">
                                    </div>

                                </div>

                            </div>

                            <div class=""modal-footer"">
                                <button type=""button"" id=""submit"" class=""btn btn-primary"" onclick=""Submit()"">Submit</button>
                   ");
                WriteLiteral("         </div>\r\n                        ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script>
        var retrievedObject = localStorage.getItem('LoginRes');
        console.log('retrievedObject: ', JSON.parse(retrievedObject));
        currentLocation = window.location.pathname;
        console.log(currentLocation);

        if (retrievedObject != '""/Admin""') {
            window.location.replace('https://localhost:44350' + retrievedObject.replace(/^""(.*)""$/, '$1'))
        }

        $(document).ready(function () {

            $(""#myTable"").DataTable({
                ""filter"": true,
                ""orderMulti"": false,
                ""ajax"": {
                    ""url"": ""https://localhost:44338/api/Employee"",
                    ""type"": ""GET"",
                    ""datatype"": ""json"",
                    ""dataSrc"": """"
                },
                ""columnDefs"": [
                    {
                        ""targets"": [5,7,9],
                        ""visible"": false,

                    },
                    {
                        ""targets"": [0");
                WriteLiteral(@", 2],
                        ""searchable"": true
                    },
                    {
                        ""targets"": [0],
                        ""searchable"": false,
                        ""orderable"": false
                    },
                ],
                ""columns"": [
                    {
                        ""data"": null,
                        ""render"": function (data, type, row, meta) {
                            return meta.row + meta.settings._iDisplayStart + 1;
                        }
                    },
                    {
                        ""data"": 'nik'
                    },
                    {
                        ""data"": null,
                        ""render"": function (data, type, row) {
                            return row[""firstName""] + ' ' + row[""lastName""];
                            Url
                        }
                    },
                    {
                        ""data"": 'birthDate',
              ");
                WriteLiteral(@"          render: function (data, type, row) {
                            let date = moment(row.BirthDate).format('DD MMMM YYYY')
                            return date
                        }
                    },
                    {
                        ""data"": 'gender'
                    },
                    {
                        ""data"": 'address'
                    },
                    {
                        ""data"": 'maritialStatus'
                    },
                    {
                        ""data"": 'phoneNumber'
                    },
                    {
                        ""data"": 'email'
                    },
                    {
                        ""data"": 'joinDate',
                        render: function (data, type, row) {
                            let date = moment(row.JoinDate).format('DD MMMM YYYY')
                            return date
                        }
                    },
                    {
            ");
                WriteLiteral(@"            ""data"": 'remainingQuota'
                    },
                    {
                        ""data"": 'niK_Manager'
                    },
                    {
                        ""data"": ""nik"",
                        ""render"": function (data, type, row, meta) {
                            return '<button id = ""buttonUpdate"" class=""btn btn-primary"" data-toggle=""modal"" style=""margin-right : 5px;"" data-target=""#modalEdit"" data-bs-toggle=""tooltip"" data-bs-placement=""top"" title=""Edit Data""><i class=""fa fa-edit""></i></button>' +
                                '<button id=""deleteTable"" class=""btn btn-danger"" style=""margin-left : 5px;"" onclick=""Delete(' + row['nik'] + ')"" data-target=""#modalDelete"" data-bs-toggle=""tooltip"" data-bs-placement=""top"" title=""Delete Data""><i class=""fa fa-trash""></i></button>';
                        },
                        ""orderable"": false,
                        ""searchable"": false
                    }
                ]
            });
        }");
                WriteLiteral(@");

        $(""#myTable"").on('click', '#buttonUpdate', function () {
            var data = $(""#myTable"").DataTable().row($(this).parents('tr')).data();
            console.log(data);
            $(""#nik"").val(data.nik);
            $(""#firstName"").val(data.firstName);
            $(""#lastName"").val(data.lastName);
            let birth = moment(data.birthDate).format(""YYYY-MM-DD"")
            $(""#birthDate"").val(birth);
            /*$(""#gender"").val(data.gender);*/
            $(`input[name='gender'][value='${data.gender}']`).prop('checked', true)
            $(""#address"").val(data.address);
            /*$(""#maritialStatus"").val(data.maritialStatus);*/
            $(`input[name='maritialStatus'][value='${data.maritialStatus}']`).prop('checked', true)
            $(""#phoneNumber"").val(data.phoneNumber);
            $(""#email"").val(data.email);
            let joindate = moment(data.JoinDate).format(""YYYY-MM-DD"")
            $(""#joinDate"").val(joindate);
            $(""#remainingQuota"").va");
                WriteLiteral(@"l(data.remainingQuota);
            $(""#niK_Manager"").val(data.niK_Manager);
            $(""#modalAdd"").modal(""show"");

        });

        function Submit() {
            var User = new Object();
            User.nik = $(""#nik"").val();
            User.firstName = $(""#firstName"").val();
            User.lastName = $(""#lastName"").val();
            User.birthDate = $(""#birthDate"").val();
            User.gender = $(""input[type='radio'][name='gender']:checked"").val()
            User.address = $(""#address"").val();
            User.maritialStatus = $(""input[type='radio'][name='maritialStatus']:checked"").val()
            User.phoneNumber = $(""#phoneNumber"").val();
            User.email = $(""#email"").val();
            User.JoinDate = $(""#joinDate"").val();
            User.remainingQuota = $(""#remainingQuota"").val();
            User.nik_Manager = $(""#niK_Manager"").val();
            console.log(User);
            $.ajax({
                type: 'PUT',
                url: 'https://localh");
                WriteLiteral(@"ost:44338/api/Employee',
                data: JSON.stringify(User),
                contentType : ""application/json; charset=utf-8"",
                datatype: 'json'
            }).done((result) => {
                    location.reload()
                    console.log(""Successed"", result);
                    $('#modalAdd').hide();
                    /*alert(""Successed to Update Data!"");*/
                    $(""#nik"").val(null);
                    $(""#fisrtName"").val(null);
                    $(""#lastName"").val(null);
                    $(""#birthDate"").val(null);
                    $('input[name=gender]:checked').val(null);
                    $(""#address"").val(null);
                    $('input[name=maritialStatus]:checked').val(null);
                    $(""#phoneNumber"").val(null);
                    $(""#email"").val(null);
                    $(""#joinDate"").val(null);
                    $(""#remainingQuota"").val(null);
                    $(""#niK_Manager"").val(null);
        ");
                WriteLiteral(@"       
            }).fail((result) => {
                console.log(""Failed"", result);
                alert(""Failed to Add Data!"");
            })
        }

        let Insert = (User) => {
            var User = new Object();
            User.Name = $(""#name"").val();
            User.BirthDate = $(""#birthdate"").val();
            User.Gender = $(""input[type='radio'][name='gender']:checked"").val();
            User.Email = $(""#email"").val();
            $.ajax({
                url: '/Employee/Insert',
                type: 'POST',
                data: User,

            }).done((result) => {
                console.log(result);
                if (result == 200) {
                    $(""#modalAdd"").modal('hide');
                    swal({
                        title: ""Success!"",
                        text: ""Data added to Database !"",
                        icon: ""success""
                    }
                    ).then(() => { location.reload() })
                }
  ");
                WriteLiteral(@"          }).fail((result) => {
                console.log(result);
                alert(""Failed to Add Data!"");
            })
        }

        let Delete = (id) => {
            swal({
                title: ""Are you sure?"",
                text: ""Once deleted, you will not be able to recover this data!"",
                icon: ""warning"",
                buttons: true,
                dangerMode: true,
            }).then((willDelete) => {
                if (willDelete) {
                    $.ajax({
                        url: `/Admin/Delete/${id}`,
                        type: 'DELETE',
                        success: (data) => {
                            console.log(data)
                            if (data == 200) {
                                swal(""Poof! Your data has been deleted!"", {
                                    icon: ""success"",
                                }).then(() => { location.reload() })
                            } else {
                      ");
                WriteLiteral(@"          swal({
                                    title: ""Error"",
                                    text: ""An error occured when deleting data"",
                                    icon: ""warning"",
                                    buttons: true,
                                    dangerMode: true
                                }).then(() => { location.reload() })
                            }
                        }
                    })
                }
            })
        }
        //$(""#myTable"").on('click', '#buttonUpdate', function () {
        //        var data = $(""#myTable"").DataTable().row($(this).parents('tr')).data();
        //        console.log(data);
        //        $(""#Request"").modal(""show"");
        //        $(""#fullname"").val(data.FullName);
        //        $(""#nik"").val(data.NIK);
        //        $(""#leavecategory"").val(data.LeaveCategory);
        //        $(""#startdate"").val(moment(data.StartDate).format('DD MMMM YYYY'));
        //        $");
                WriteLiteral(@"(""#enddate"").val(moment(data.EndDate).format('DD MMMM YYYY'));
        //        $(""#reasonrequest"").val(data.ReasonRequest);
        //        $(""#email"").val(data.Email);
        //        $(""#notes"").val(data.Notes);
        //        $(""#statusRequest"").val(data.StatusRequest);
        //        $(""#id"").val(data.Id);
        //});

        let Edit = (nik) => {
            $.ajax({
                type: 'GET',
                url: 'Admin/Edit',
                success: (data) => {
                    let myModal = $('#modalAdd')
                    $('#id').val(data.id)
                    $('#name').val(data.name)
                    let Birth = moment(data.birthDate).format(""YYYY-MM-DD"")
                    $('#birthdate').val(Birth)
                    $(`input[name='gender'][value='${data.gender}']`).prop('checked', true)
                    $('#email').val(data.email)
                    myModal.modal('show')
                },
                error: (data) => {
              ");
                WriteLiteral(@"      console.log(data);
                }
            })
        }

        let Update = (User) => {
            console.log(User);
            $.ajax({
                url: 'https://localhost:44338/api/Employee',
                type: 'Put',
                data: User,
                success: (data) => {
                    if (data == 200) {
                        $(""#modalAdd"").modal('hide');
                        swal({
                            title: ""Success!"",
                            text: ""Data Has Been Edited Successful !"",
                            icon: ""success""
                        }
                        ).then(() => { location.reload() })
                    } else {
                        console.log(data);
                        alert(""Failed to Update Data!"");
                    }
                },
                error: (data) => {
                    console.log(data);
                    alert(""Failed to Update Data!"")
                }
");
                WriteLiteral(@"            })
        }
        let ClearData = () => {
            $('#id').val("""")
            $('#name').val("""")
            $('#birthdate').val("""")
            $(`input[name='gender']`).prop('checked', false)
            $('#email').val("""")
        }
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
